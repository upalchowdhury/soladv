pragma circom 2.0.0;

template MiMC5() {
    signal input x;
    signal input k;
    signal output h;

    var nRounds = 10;

    var c[nRounds] = [
        0,
        21469745217645236226405533686231592324177671190346326883245530828586381403876,
        50297292308054131785073003188640636012765603289604974664717077154647718767691,
        106253950757591248575183329665927832654891498741470681534742234294971120334749,
        16562112986402259118419179721668484133429300227020801196120440207549964854140,
        57306670214488528918457646459609688072645567370160016749464560944657195907328,
        108800175491146374658636808924848899594398629303837051145484851272960953126700,
        52091995457855965380176529746846521763751311625573037022759665111626306997253,
        4647715852037907467884498874870960430435996725635089920518875461648844420543,
        19720773146379732435540009001854231484085729453524050584265326241021328895041
    ];

    signal lastOutput[nRounds + 1];
    var base[nRounds];
    signal base2[nRounds];
    signal base4[nRounds];

    lastOutput[0] <== x;

    for(var i = 0; i < nRounds; i++){
        base[i] = lastOutput[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutput[i + 1] <== base4[i] * base[i];
    }

    h <== lastOutput[nRounds] + k;
}

component main = MiMC5();