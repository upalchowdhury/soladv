/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, 
 a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr // get 4 bytes function selector

    // jump to the implementation
     dup1 __FUNC_SIG(add1) eq add1 jumpi

    0x00 dup1 revert // revert if function not found

    // dispatcher
    add1:
        ADD1()

}
#define macro ADD1() = takes(0) returns(0) {
        
        0x04 calldataload // read after the function selector
        0x01 // put no. 1 on Stack
        add

        0x00 mstore

        0x20 0x00 return



    }
