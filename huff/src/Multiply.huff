/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply`
  that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */


#include "huffmate/math/SafeMath.huff"

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xE0 shr // get 4 bytes function selector

    // jump to the implementation
    dup1 __FUNC_SIG(add1) eq multiply jumpi

    0x00 dup1 revert

    // dispatcher
    multiply:
        MULTIPLY()

}
#define macro MULTIPLY() = takes(0) returns(0) {
        
        0x04 calldataload
        0x24 calldataload 
        SAFE_MUL()

        0x00 mstore

        0x20 0x00 return



    }

